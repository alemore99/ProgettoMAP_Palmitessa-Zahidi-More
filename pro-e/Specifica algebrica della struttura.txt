Specifica algebrica della struttura dati Set

Specifica Algebrica per Set[T] dove con T si intendono il tipo degli elementi presenti all'interno del Set ed il set assume lo stesso valore che ha T; ad esempio se T è stringa allora Set[T] sara un set di stringhe. Riassumendo i tipi usati all'interno del Set sono:

  - Set<T> -> tipo del set.
  - T -> tipo degli elementi.
  - boolean -> tipo booleano per operazioni di verifica.

Specifica sintattica:
Nella specifica sintattica ogni insieme viene detto sort. Qui abbiamo come sort: T che indica il tipo di parametri, Set il set che assume lo stesso tipo di T ed boolean che serve solo a dirci se è vero o falso

	sorts: Set, T, boolean 

	operazioni ammesse
		
		empty() → Set<T>  
		
		insert(Set<T>, T) → Set<T>  
		
		contains(Set<T>, T) → boolean  
		
		remove(Set<T>, T) → Set<T>  
		
		isEmpty(Set<T>) → boolean  
		
		size(Set<T>) → int  
		
		union(Set<T>, Set<T>) → Set<T>  
		
		intersection(Set<T>, Set<T>) → Set<T>  
		
		difference(Set<T>, Set<T>) → Set<T> 



Specifica semantica:
Nella specifica semantica, specifico i parametri su cui gli operatori devono lavorare

		contains(empty(), x) = false  
		contains(insert(s, x), x) = true  
		x ≠ y ⇒ contains(insert(s, x), y) = contains(s, y)  

		insert(insert(s, x), x) = insert(s, x)  
		x ≠ y ⇒ insert(insert(s, x), y) = insert(insert(s, y), x)  

		remove(empty(), x) = empty()  
		remove(insert(s, x), x) = remove(s, x)  
		x ≠ y ⇒ remove(insert(s, x), y) = insert(remove(s, y), x)  

		isEmpty(empty()) = true  
		isEmpty(insert(s, x)) = false  
		size(empty()) = 0  
		contains(s, x) ⇒ size(insert(s, x)) = size(s)  
		¬contains(s, x) ⇒ size(insert(s, x)) = size(s) + 1  

		union(s1, s2) = { x | x ∈ s1 ∨ x ∈ s2 }  
		intersection(s1, s2) = { x | x ∈ s1 ∧ x ∈ s2 }  
		difference(s1, s2) = { x | x ∈ s1 ∧ x ∉ s2 }  


Specifica di restrizione
Indica le restrizioni che ci devono essere all'interno delle varie operaizioni, cioè quelle che danno un tipo "errore" dove errore è un errore non specificato

restrictions
	remove(empty(), x) = error
	contains(insert(s, x), y) = contains(s, y) se x ≠ y = errore